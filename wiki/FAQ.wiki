#summary Answers to Frequently Asked Questions.

= FAQ =

This section is "under construction."

*The information here applies to Version 2 of !JsDoc Toolkit.*

  * How do I document the "module pattern?"
  * [FAQ#How_do_I_define_my_own_variables_from_the_command_line? How do I define my own variables from the command line?]
  * [FAQ#Can_I_use_my_own_tags? Can I use my own tags?]
  * Why isn't the jsdoc template better?
  * How is this project related to JSDoc?

== How do I document the "module pattern?" ==

_Use options:_ -p

{{{
/** @namespace */
YOOHOO.myProject.myModule = function () {
	/** @private */
	var myPrivateVar = "";

	/** @private */
	var myPrivateMethod = function () {
	}

	/** @scope YOOHOO.myProject.myModule */
	return  {
		/** describe myPublicProperty here */
		myPublicProperty: "",
		
		/** describe myPublicMethod here */
		myPublicMethod: function () {
		}
	};
}();
}}}

==How do I define my own variables from the command line? ==

Use the `-D` command line option to define one or more variables.

{{{
-D="status:Beta" -D="milestone:112"
}}}

These values can then be accessed in your template, like so:

{{{
<i>Project release status is {+ JSDOC.opt.D.status +}, milestone {+ JSDOC.opt.D.milestone +}.</i>
}}}

To produce this output: _Project release status is Beta, milestone 112.

==Can I use my own tags?==

Yes. In this example we invent an arbitrary tag named "hilite" to indicate that the documentation should be displayed in a bright color.

{{{
/**
    Reverse the order of the letters in a string.
    @hilite orange
 */
function reverse(str) {
}
}}}

In your template you can then access that tag like so:

{{{
{!
    if (data.comment.getTag("hilite").length) {
        output += 'style="color: '+data.comment.getTag("hilite")[0]+'"';
    }
!}
}}}

To produce this output: style="color: orange"

==Why isn't the jsdoc template better?==

The architecture of !JsDoc Toolkit was built around the idea of templates for a very good reason: you are meant to use them. A great deal of work has gone into separating out the template code and designing a simple templating language in order to encourage this to happen.

Traditionally the JSDoc output has tried to look like !JavaDoc but I've moved away from that. Now the template that is included with the standard distribution is purposely generic and is meant to be a starting point for you to create your own customized output.

==How is this project related to JSDoc?==

The term !JsDoc refers to the !JavaDoc-like syntax used to write inline documentation comments in !JavaScript, so one answer is that !JsDoc Toolkit uses the !JsDoc syntax. There are other applications which also use the !JsDoc syntax.

But most people, when they say "JSDoc," are referring to the Perl-based project by that name hosted on Sourceforge. !JsDoc Toolkit is related to that project because they were both created by the same developer: Michael Mathews.

_Michael writes..._
The original project was first released in 2001 but had been in private use at the company I worked at before that. About a year after JSDoc was publicly released Gabriel Reid took over the project and has done an outstanding job of maintaining, supporting and extending JSDoc.pm ever since. I am extremely grateful for Gabriel's contributions to JSDoc and he certainly deserves front-and-center mention in any credit listing.

But sometime in 2006 I became concerned that the basic architecture of JSDoc.pm was preventing it from keeping up with the renaissance that !JavaScript had undergone, so I started working on what later became a total rewrite. Gabriel, along with many others participated in the initial discussions of this rewrite, but Gabriel declined to join the active development.